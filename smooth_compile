#!/usr/bin/bash

#  Copyright 2023 Philipp Andelfinger, Justin Kreikemeyer
#  
#  Permission is hereby granted, free of charge, to any person obtaining a copy of this software
#  and associated documentation files (the “Software”), to deal in the Software without
#  restriction, including without limitation the rights to use, copy, modify, merge, publish,
#  distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
#  Software is furnished to do so, subject to the following conditions:
#   
#    The above copyright notice and this permission notice shall be included in all copies or
#    substantial portions of the Software.
#    
#    THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
#    INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
#    PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
#    ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
#    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#    SOFTWARE.

set -e
set -o pipefail

function preface {
  echo -n "$1"
  local d="${1-}" f=${2-}
  if shift 2; then
    printf %s "$f" "${@/#/ $d}"
  fi
}

cpp_flags="-fdiagnostics-color=always -std=c++20"
opt_flags="-g -O3 -march=native -mf16c"
transform_flags=$(preface --extra-arg= $cpp_flags -DNO_AD -DCRISP)
CPATH=$CPATH:$(clang++ -v 2>&1| grep 'Selected GCC installation' | awk '{print $NF}')/include

prefix=${1%.*}
dgsi_normalized_fname=${prefix}_normalized_dgsi.cpp
dgsi_fname=${prefix}_dgsi.cpp
dgo_fname=${prefix}_dgo.cpp
ad_flag=FW_AD

args_fname=backend/args.cpp

# crisp with the option for sampling (e.g., for IPA)
echo "Compiling crisp versions as ${prefix}_crisp(_ad)..."
( clang++ $cpp_flags $opt_flags -Wall -I. $1 $args_fname -DCRISP -DNO_AD -o ${prefix}_crisp || exit
clang++ $cpp_flags $opt_flags -Wall -I. $1 $args_fname -DCRISP -DFW_AD -o ${prefix}_crisp_ad || exit
echo "Finished compiling ${prefix}_crisp(_ad)" ) &

# Polyak Gradient Oracle (PGO)
echo "Compiling Polyak Gradient Oracle version as ${prefix}_pgo..."
( clang++ $cpp_flags $opt_flags -Wall -I. $1 $args_fname -DPGO -DNO_AD -o ${prefix}_pgo || exit
echo "Finished compiling ${prefix}_pgo" ) &

# REINFORCE
echo "Compiling REINFORCE version as ${prefix}_reinforce..."
( clang++ $cpp_flags $opt_flags -Wall -I. $1 $args_fname -DREINFORCE -DNO_AD -o ${prefix}_reinforce || exit
echo "Finished compiling ${prefix}_reinforce" ) &

# DGSI
echo "Compiling DGSI versions as ${prefix}_dgsi(_noad)..."
( CPATH=${CPATH} ./transformation/normalize $transform_flags $1 | clang-format > $dgsi_normalized_fname || exit
CPATH=${CPATH} ./transformation/smooth_dgsi $transform_flags $dgsi_normalized_fname | clang-format > $dgsi_fname || exit
clang++ $cpp_flags $opt_flags -Wall -I. $dgsi_fname $args_fname -DSI -D$ad_flag -o ${prefix}_dgsi || exit
clang++ $cpp_flags $opt_flags -Wall -I. $dgsi_fname $args_fname -DSI -DNO_AD -o ${prefix}_dgsi_noad || exit
echo "Finished compiling ${prefix}_dgsi(_noad)" ) &

# DiscoGrad Gradient Oracle (DGO)
echo "Compiling DiscoGrad Gradient Oracle versions as ${prefix}_dgo(_noad)..."
( CPATH=${CPATH} ./transformation/smooth_dgo $transform_flags $1 | clang-format > $dgo_fname || exit
clang++ $cpp_flags $opt_flags -Wall -I. $dgo_fname $args_fname -DDGO -D$ad_flag -o ${prefix}_dgo || exit
clang++ $cpp_flags $opt_flags -Wall -I. $dgo_fname $args_fname -DDGO -DNO_AD -o ${prefix}_dgo_noad || exit
echo "Finished compiling ${prefix}_dgo(_noad)" ) &

wait
